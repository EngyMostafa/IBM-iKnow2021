PATH ibm_integration_compress_decompress;

CREATE COMPUTE MODULE KafkaConsumer_DeCompress
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE refInputRoot REFERENCE TO InputRoot.JSON.Data;
		
		SET Environment.Variables.LogDescription = refInputRoot.metadata.LogDescription;
		SET Environment.Variables.EventTimeStamp = refInputRoot.metadata.EventTimeStamp;
		SET Environment.Variables.ErrorText = refInputRoot.error;
		SET Environment.Variables.ErrorBody = refInputRoot.body;
		
		IF refInputRoot.isCompressed = TRUE THEN
			DECLARE decompressedPayload CHARACTER;
			Call decompressMsg(refInputRoot.payload) INTO decompressedPayload;
			DECLARE dataAsBit BIT CAST(decompressedPayload AS BIT CCSID 1208);
			CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON' PARSE(dataAsBit CCSID 1208);
		ELSE
			CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
			CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object);
			SET OutputRoot.JSON.Data = refInputRoot;
		END IF;
		
		DELETE FIELD OutputRoot.JSON.Data.metadata;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
