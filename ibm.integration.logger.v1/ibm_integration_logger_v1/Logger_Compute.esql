BROKER SCHEMA ibm_integration_logger_v1

DECLARE logDescription EXTERNAL CHARACTER '';
DECLARE error EXTERNAL BOOLEAN false;
DECLARE directLog EXTERNAL BOOLEAN false;
CREATE COMPUTE MODULE Logger_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE httpStatusCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		SET OutputRoot.HTTPRequestHeader."Authorization" = Environment.Variables.cosToken;
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
		CREATE FIELD OutputRoot.JSON.Data IDENTITY(JSON.Object) Data; 
		
		IF (InputExceptionList.*.* IS NOT NULL) THEN
			DECLARE messageNumber INTEGER;
			DECLARE messageText CHAR;
			DECLARE body CHAR;
			CALL getLastExceptionDetail(InputExceptionList,messageNumber,messageText,body);   
		  	SET OutputRoot.JSON.Data.error = messageText; 
		  	SET OutputRoot.JSON.Data.errorDescList = InputExceptionList; 
		  	SET OutputRoot.JSON.Data.body = InputRoot.JSON.Data;
		ELSEIF  (error = TRUE) AND (InputRoot.BLOB.BLOB IS NOT NULL)  THEN
			DECLARE responseError  CHARACTER  CAST(InputRoot.BLOB.BLOB  AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		    SET OutputRoot.JSON.Data.error = responseError;
		ELSE
			SET OutputRoot.JSON.Data = InputRoot.JSON.Data;
		END IF ; 
		
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = 'https://s3.eu.cloud-object-storage.appdomain.cloud/bucket-name/json_file_name.json';
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE PROCEDURE getLastExceptionDetail(IN InputTree reference,OUT messageNumber integer,
	OUT messageText char,OUT body char)
	/****************************************************************************
	* A procedure that will get the details of the last exception from a message
	* IN InputTree: The incoming exception list
	* IN messageNumber: The last message numberr.
	* IN messageText: The last message text.
	*****************************************************************************/
	BEGIN
		-- Create a reference to the first child of the exception list
		declare ptrException reference to InputTree.*[1];
		-- keep looping while the moves to the child of exception list work
		WHILE lastmove(ptrException) DO
			-- store the current values for the error number and text
			IF ptrException.Number is not null THEN
				SET messageNumber = ptrException.Number;
	 			
	 			SET messageText =   ptrException.Text; 
	 			SET body = ptrException.Insert.Text; 
	 			 
			END IF;
			-- now move to the last child which should be the next exceptionlist
			move ptrException lastchild;
		END WHILE;
	END;
